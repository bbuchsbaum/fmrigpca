% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/temporal.R
\name{estimate_ar_whitener}
\alias{estimate_ar_whitener}
\title{Estimate a design-free AR(p) whitener from a run}
\usage{
estimate_ar_whitener(nv_run, wm_mask = NULL, p = 1L)
}
\arguments{
\item{nv_run}{A \code{neuroim2::NeuroVec} (single run) with dimensions V x T.}

\item{wm_mask}{Optional \code{NeuroVol} to restrict the mean to WM voxels.}

\item{p}{Integer AR order (default 1). Use 0 to skip AR modeling.}
}
\value{
A list with components \code{Q} (inverse Cholesky), \code{Sigma} (covariance),
and \code{phi} (AR coefficients of length \code{p}).
}
\description{
Estimates an autoregressive whitener for a single \code{NeuroVec} run using the
global mean (optionally restricted to WM) and Yuleâ€“Walker AR fitting.
Returns the inverse Cholesky \code{Q}, the covariance \code{Sigma}, and AR
coefficients \code{phi}.
}
\details{
The time series is formed as the mean across voxels, optionally within a
provided white-matter mask. It is standardized, and AR(p) coefficients are
estimated via \code{stats::ar.yw}. The implied Toeplitz covariance \code{Sigma} is
regularized to positive definiteness (via a ridge and \code{Matrix::nearPD} if
needed). The whitener \code{Q = chol(Sigma)^{-1}} is returned for use in the
row metric. If \code{p = 0}, an identity whitener is returned.
}
\examples{
\donttest{
nv_run <- neuroim2::simulate_fmri(mask, n_time = 50, seed = 1)
arw   <- estimate_ar_whitener(nv_run, p = 1L)
}

}
\seealso{
\code{\link[=estimate_ar_whitener_parcel]{estimate_ar_whitener_parcel()}} for parcel-level AR whitening

Other temporal metrics: 
\code{\link{build_temporal_metric}()},
\code{\link{build_temporal_metric_parcel}()},
\code{\link{estimate_ar_whitener_parcel}()},
\code{\link{make_frame_weights}()},
\code{\link{make_temporal_penalty}()}
}
\concept{temporal metrics}
