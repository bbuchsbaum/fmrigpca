% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/laplacian.R
\name{make_laplacian}
\alias{make_laplacian}
\title{Build a spatial graph Laplacian from a NeuroVol mask}
\usage{
make_laplacian(mask_vol, k = 6, sigma = 2.5, normalized = TRUE)
}
\arguments{
\item{mask_vol}{A \code{neuroim2::NeuroVol} logical/numeric mask defining in-mask voxels.}

\item{k}{Integer; number of neighbors in the k–NN graph (default 6). Common
choices: 6 for face connectivity, 18 for face+edge, 26 for full 3D.}

\item{sigma}{Numeric; Gaussian kernel bandwidth for edge weights (default 2.5).
Smaller values create sparser graphs; larger values smooth more broadly.}

\item{normalized}{Logical; return the normalized Laplacian if \code{TRUE} (default).
Normalized version has better numerical properties and bounded spectrum.}
}
\value{
A sparse, symmetric \code{Matrix} of size \verb{n_voxels x n_voxels} representing
the (optionally normalized) graph Laplacian over in-mask voxels.
}
\description{
Constructs a sparse, symmetric voxel–wise graph Laplacian for a masked volume
using k–nearest neighbors with a Gaussian kernel. Optionally returns the
normalized Laplacian and scales by the largest eigenvalue for numerical
stability.
}
\details{
Voxels inside the mask are converted to integer coordinates (i,j,k), then a
k–NN graph is built with edge weights \code{exp(-d^2 / (2*sigma^2))} using the
\code{neighborweights} package (functions \code{knn_weights} or \code{spatial_adjacency}).
The unnormalized Laplacian is \code{L = D - W}.
The normalized variant is \verb{L = I - D^\{-1/2\} W D^\{-1/2\}}. In both cases, \code{L}
is divided by its largest eigenvalue when positive and finite, keeping the
spectrum within a stable range (e.g., 0 to 2 for the normalized Laplacian).

Edge cases are handled: a single-voxel mask yields a 1x1 identity; empty
masks are rejected. If \code{k} is too large, it is clipped to \code{n-1} neighbors.
}
\examples{
\donttest{
dims <- c(6,6,4)
arr  <- array(FALSE, dims); arr[3:4,3:4,2:3] <- TRUE
mv   <- neuroim2::NeuroVol(arr, neuroim2::NeuroSpace(dims, c(2,2,2)))
L    <- make_laplacian(mv, k = 4, sigma = 2, normalized = TRUE)
Matrix::isSymmetric(L)
}

}
\seealso{
\code{\link[=make_parcel_laplacian]{make_parcel_laplacian()}} for parcel-level Laplacian construction

Other spatial metrics: 
\code{\link{build_spatial_metric}()},
\code{\link{build_spatial_metric_parcel}()},
\code{\link{compute_tsnr}()},
\code{\link{compute_tsnr_parcel}()},
\code{\link{make_parcel_laplacian}()}
}
\concept{spatial metrics}
